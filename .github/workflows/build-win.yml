name: Build Windows Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build-windows:
    name: Build and Release Windows Executable
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      
      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } elseif ("${{ github.ref }}" -like "refs/tags/*") {
            $version = "${{ github.ref }}".Replace("refs/tags/", "")
          } else {
            $version = "dev-$(git rev-parse --short HEAD)"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Building version: $version"
      
      - name: Build Windows AMD64
        shell: pwsh
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "0"
          $version = "${{ steps.version.outputs.VERSION }}"
          go build -v -ldflags "-s -w -X main.Version=$version" -o opkssh-windows-amd64.exe
      
      - name: Build Windows ARM64
        shell: pwsh
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "arm64"
          $env:CGO_ENABLED = "0"
          $version = "${{ steps.version.outputs.VERSION }}"
          go build -v -ldflags "-s -w -X main.Version=$version" -o opkssh-windows-arm64.exe
      
      - name: Copy PowerShell scripts
        shell: pwsh
        run: |
          Copy-Item "scripts\windows\Install-OpksshServer.ps1" -Destination "Install-OpksshServer.ps1"
          Copy-Item "scripts\windows\Uninstall-OpksshServer.ps1" -Destination "Uninstall-OpksshServer.ps1"
      
      - name: Generate checksums
        shell: pwsh
        run: |
          $amd64Hash = (Get-FileHash opkssh-windows-amd64.exe -Algorithm SHA256).Hash
          $arm64Hash = (Get-FileHash opkssh-windows-arm64.exe -Algorithm SHA256).Hash
          $installHash = (Get-FileHash Install-OpksshServer.ps1 -Algorithm SHA256).Hash
          $uninstallHash = (Get-FileHash Uninstall-OpksshServer.ps1 -Algorithm SHA256).Hash
          
          @"
          $amd64Hash  opkssh-windows-amd64.exe
          $arm64Hash  opkssh-windows-arm64.exe
          $installHash  Install-OpksshServer.ps1
          $uninstallHash  Uninstall-OpksshServer.ps1
          "@ | Out-File -FilePath checksums.txt -Encoding ASCII
          
          Get-Content checksums.txt
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          generate_release_notes: true
          files: |
            opkssh-windows-amd64.exe
            opkssh-windows-arm64.exe
            Install-OpksshServer.ps1
            Uninstall-OpksshServer.ps1
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload artifacts (for manual runs)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: opkssh-windows-binaries
          path: |
            opkssh-windows-amd64.exe
            opkssh-windows-arm64.exe
            Install-OpksshServer.ps1
            Uninstall-OpksshServer.ps1
            checksums.txt
          retention-days: 30
